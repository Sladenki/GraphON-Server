import { Injectable } from '@nestjs/common';
import { ModelType } from '@typegoose/typegoose/lib/types';
import { InjectModel } from '@m8a/nestjs-typegoose';
import { GraphModel } from './graph.model';
import { GraphSubsModel } from 'src/graphSubs/graphSubs.model';
import { CreateGraphDto } from './dto/create-graph.dto';
import { CreateGlobalGraphDto } from './dto/create-global-graph.dto';
import { CreateTopicGraphDto } from './dto/create-topic-graph.dto';
import { Types } from 'mongoose';
import { GraphSubsService } from 'src/graphSubs/graphSubs.service';
import { S3Service } from 'src/s3/s3.service';
import { RedisService } from 'src/redis/redis.service';
import type { Express } from 'express';
import { PipelineStage } from 'mongoose';

@Injectable()
export class GraphService {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è TTL –∫—ç—à–∞
  private readonly GRAPH_CACHE_TTL = 7 * 24 * 60 * 60; // 1 –Ω–µ–¥–µ–ª—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  private readonly USER_SUBS_CACHE_TTL = 5 * 60; // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  constructor(
    @InjectModel(GraphModel)
    private readonly GraphModel: ModelType<GraphModel>,

    @InjectModel(GraphSubsModel)
    private readonly graphSubsModel: ModelType<GraphSubsModel>,

    private readonly graphSubsService: GraphSubsService,
    private readonly s3Service: S3Service,
    private readonly redisService: RedisService,
  ) {}

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫—ç—à–∞ ---
  private generateCacheKey(method: string, params: any): string {
    const paramsString = JSON.stringify(params);
    return `graph:${method}:${paramsString}`;
  }

  private async invalidateGraphCache(): Promise<void> {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∫—ç—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞—Ñ–∞–º–∏
    await this.redisService.delPattern('graph:*');
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
  private async getUserSubscriptions(userId: Types.ObjectId): Promise<Set<string>> {
    const cacheKey = `userSubs:${userId.toString()}`;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedSubs = await this.redisService.get(cacheKey);
    if (cachedSubs && Array.isArray(cachedSubs)) {
      console.log(`üìñ Redis CACHE HIT: ${cacheKey} (${cachedSubs.length} –ø–æ–¥–ø–∏—Å–æ–∫)`);
      return new Set(cachedSubs as string[]);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    const userSubscriptions = await this.graphSubsModel
      .find({ user: userId })
      .select('graph')
      .lean()
      .exec();

    const subscribedGraphIds = userSubscriptions.map(sub => sub.graph.toString());
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç (–∫–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
    await this.redisService.set(cacheKey, subscribedGraphIds, this.USER_SUBS_CACHE_TTL);
    console.log(`üìù Redis CACHE MISS: ${cacheKey} (${subscribedGraphIds.length} –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à)`);
    
    return new Set(subscribedGraphIds);
  }

  // --- –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  private async invalidateUserSubscriptionsCache(userId: Types.ObjectId): Promise<void> {
    const cacheKey = `userSubs:${userId.toString()}`;
    await this.redisService.del(cacheKey);
  }

  // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫ –≥—Ä–∞—Ñ–∞–º ---
  private addSubscriptionInfo(graphs: any[], subscribedGraphIds: Set<string>): any[] {
    return graphs.map(graph => ({
      ...graph,
      isSubscribed: subscribedGraphIds.has(graph._id.toString())
    }));
  }

  // --- –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ ---
  async createGraph(dto: CreateGraphDto, userId: Types.ObjectId, image?: Express.Multer.File) {
    let imgPath: string | undefined;

    if (image) {
      // Get file extension from original filename
      const fileExtension = image.originalname.split('.').pop();
      // Create filename using graph name and original file extension
      const fileName = `${dto.name}.${fileExtension}`;
      // Create the desired path format for S3
      const s3Path = `graphAva/${fileName}`;
      const uploadResult = await this.s3Service.uploadFile(image, s3Path);
      imgPath = `images/${s3Path}`;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ
    const graph = await this.GraphModel.create({
      ...dto, 
      ownerUserId: userId, 
      imgPath,
      graphType: "default",
      globalGraphId: dto.globalGraphId
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π –≥—Ä–∞—Ñ (–µ—Å—Ç—å parentGraphId), –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∞
    if (dto.parentGraphId) {
      await this.GraphModel.findByIdAndUpdate(dto.parentGraphId, {
        $inc: { childGraphNum: 1 },
      }).exec();
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞
    await this.invalidateGraphCache();
  
    return graph;
  }  

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –ø–æ id ---
  async getGraphById(id: Types.ObjectId) {
    const cacheKey = this.generateCacheKey('getGraphById', { id: id.toString() });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedGraph = await this.redisService.get(cacheKey);
    if (cachedGraph) {
      return cachedGraph;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    const graph = await this.GraphModel.findById(id).populate('parentGraphId', 'name');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 –Ω–µ–¥–µ–ª—é
    if (graph) {
      await this.redisService.set(cacheKey, graph, this.GRAPH_CACHE_TTL);
    }
    
    return graph;
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω—ã—Ö) —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä–∞—Ñ–æ–≤ ---
  async getParentGraphs(skip: any, userId?: Types.ObjectId) {
    const cacheKey = this.generateCacheKey('getParentGraphs', { 
      skip: Number(skip) || 0
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–æ–≤ –∏–∑ –∫—ç—à–∞
    let graphs = await this.redisService.get(cacheKey);
    
    if (!graphs || !Array.isArray(graphs)) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
      graphs = await this.GraphModel
        .find()
        .skip(Number(skip) || 0)
        .lean()
        .exec();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –Ω–∞ 1 –¥–µ–Ω—å
      await this.redisService.set(cacheKey, graphs, 86400);
    }

    if (!userId) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞—Ñ—ã –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      return graphs as any[];
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const subscribedGraphIds = await this.getUserSubscriptions(userId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫ –≥—Ä–∞—Ñ–∞–º
    return this.addSubscriptionInfo(graphs as any[], subscribedGraphIds);
  }

  async getAllChildrenGraphs(parentGraphId: Types.ObjectId, skip: any, userId?: Types.ObjectId) {
    const cacheKey = this.generateCacheKey('getAllChildrenGraphs', { 
      parentGraphId: parentGraphId.toString(),
      skip: Number(skip) || 0
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–æ–≤ –∏–∑ –∫—ç—à–∞
    let graphs = await this.redisService.get(cacheKey);
    
    if (!graphs || !Array.isArray(graphs)) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
      graphs = await this.GraphModel
        .find({
          globalGraphId: parentGraphId,
          graphType: 'default'
        })
        .skip(Number(skip) || 0)
        .lean()
        .exec();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –Ω–∞ 1 –¥–µ–Ω—å
      await this.redisService.set(cacheKey, graphs, 86400);
    }

    if (!userId) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä–∞—Ñ—ã –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      return graphs as any[];
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const subscribedGraphIds = await this.getUserSubscriptions(userId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫ –≥—Ä–∞—Ñ–∞–º
    return this.addSubscriptionInfo(graphs as any[], subscribedGraphIds);
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –ø–æ Id —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∞-—Ç–µ–º–∞—Ç–∏–∫–∏ - –î–ª—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä–∞—Ñ–æ–≤ --- 
  async getAllChildrenByTopic(parentGraphId: Types.ObjectId) {

    const childrenGraphs = this.GraphModel.find({
      parentGraphId: parentGraphId,
      graphType: 'default'
    }).lean()
  
    return childrenGraphs
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –ø–æ Id –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ --- 
  async getAllChildrenByGlobal(globalGraphId: Types.ObjectId) {

    const [globalGraph, childrenGraphs] = await Promise.all([
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ
      this.GraphModel.findOne({
        _id: globalGraphId,
        graphType: 'global'
      }).lean(),

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –≥—Ä–∞—Ñ—ã
      this.GraphModel.find({
        globalGraphId: globalGraphId,
        graphType: 'default'
      }).lean()
    ]);
  
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥–æ—á–µ—Ä–Ω–∏–µ
    return globalGraph ? [globalGraph, ...childrenGraphs] : childrenGraphs;
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–≤-—Ç–µ–º–∞—Ç–∏–∫ ---
  async getTopicGraphs(parentGraphId: Types.ObjectId) {
    const pipeline: PipelineStage[] = [
      {
        $match: {
          graphType: 'topic',
          parentGraphId: parentGraphId
        }
      },
    ];

    return this.GraphModel.aggregate(pipeline).exec();
  }

  // --- –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ ---
  async createGlobalGraph(dto: CreateGlobalGraphDto, userId: Types.ObjectId, image?: Express.Multer.File) {
    let imgPath: string | undefined;

    if (image) {
      const fileExtension = image.originalname.split('.').pop();
      const fileName = `${dto.name}.${fileExtension}`;
      const s3Path = `graphAva/${fileName}`;
      const uploadResult = await this.s3Service.uploadFile(image, s3Path);
      imgPath = `images/${s3Path}`;
    }

    const graph = await this.GraphModel.create({
      name: dto.name,
      city: dto.city,
      ownerUserId: userId,
      imgPath,
      graphType: "global"
    });

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
    await this.invalidateGraphCache();

    return graph;
  }

  // --- –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞-—Ç–µ–º–∞—Ç–∏–∫–∏ ---
  async createTopicGraph(dto: CreateTopicGraphDto, userId: Types.ObjectId, image?: Express.Multer.File) {
    let imgPath: string | undefined;

    if (image) {
      const fileExtension = image.originalname.split('.').pop();
      const fileName = `${dto.name}.${fileExtension}`;
      const s3Path = `graphAva/${fileName}`;
      const uploadResult = await this.s3Service.uploadFile(image, s3Path);
      imgPath = `images/${s3Path}`;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ-—Ç–µ–º–∞—Ç–∏–∫—É
    const graph = await this.GraphModel.create({
      ...dto,
      ownerUserId: userId,
      imgPath,
      globalGraphId: dto.parentGraphId,
      graphType: "topic"
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∞
    await this.GraphModel.findByIdAndUpdate(dto.parentGraphId, {
      $inc: { childGraphNum: 1 },
    }).exec();

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞-—Ç–µ–º–∞—Ç–∏–∫–∏
    await this.invalidateGraphCache();

    return graph;
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ ---
  async getGlobalGraphs() {
    const cacheKey = this.generateCacheKey('getGlobalGraphs', {});
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedGraphs = await this.redisService.get(cacheKey);
    if (cachedGraphs) {
      return cachedGraphs;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    const graphs = await this.GraphModel.find({ graphType: 'global' })
      .sort({ name: 1 })
      .lean()
      .exec();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 –¥–µ–Ω—å
    await this.redisService.set(cacheKey, graphs, 86400);
    
    return graphs;
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –µ–≥–æ –≥—Ä–∞—Ñ–∞–º–∏-—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ ---
  async getTopicGraphsWithMain(globalGraphId: Types.ObjectId) {
    const cacheKey = this.generateCacheKey('getTopicGraphsWithMain', { 
      globalGraphId: globalGraphId.toString() 
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedResult = await this.redisService.get(cacheKey);
    if (cachedResult) {
      return cachedResult;
    }

    const [globalGraph, topicGraphs] = await Promise.all([
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–µ
      this.GraphModel.findOne({
        _id: globalGraphId,
        graphType: 'global'
      }).lean(),

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ—ã-—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
      this.GraphModel.find({
        parentGraphId: globalGraphId,
        graphType: 'topic'
      }).sort({ name: 1 }).lean()
    ]);

    const result = {
      globalGraph,
      topicGraphs
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 1 –¥–µ–Ω—å
    await this.redisService.set(cacheKey, result, 86400);
    
    return result;
  }

}
