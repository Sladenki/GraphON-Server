import { forwardRef, Inject, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';
import { ModelType } from '@typegoose/typegoose/lib/types';
import { InjectModel } from '@m8a/nestjs-typegoose';
import { GraphSubsModel } from './graphSubs.model';
import { EventRegsModel } from 'src/eventRegs/eventRegs.model';
import { Types } from 'mongoose';
import { ScheduleService } from 'src/schedule/schedule.service';
import { GraphModel } from 'src/graph/graph.model';
import { EventService } from 'src/event/event.service';
import { EventRegsService } from 'src/eventRegs/eventRegs.service';
import { UserModel } from 'src/user/user.model';
import { RedisService } from 'src/redis/redis.service';

@Injectable()
export class GraphSubsService {
  constructor(
    @InjectModel(GraphSubsModel)
    private readonly graphSubsModel: ModelType<GraphSubsModel>,

    @InjectModel(GraphModel)
    private readonly GraphModel: ModelType<GraphModel>,

    @InjectModel(UserModel)
    private readonly UserModel: ModelType<UserModel>,

    @InjectModel(EventRegsModel)
    private readonly eventRegsModel: ModelType<EventRegsModel>,

    private readonly scheduleService: ScheduleService,
    private readonly eventService: EventService,
    private readonly eventRegsService: EventRegsService,
    private readonly redisService: RedisService
  ) {}

  // --- –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  private async invalidateUserSubscriptionsCache(userId: string | Types.ObjectId): Promise<void> {
    const cacheKey = `userSubs:${userId.toString()}`;
    await this.redisService.del(cacheKey);
    console.log(`üóëÔ∏è Redis CACHE INVALIDATED: ${cacheKey}`);
  }

  // --- –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –≥—Ä–∞—Ñ–∞ ---
  private async invalidateGraphCache(graphId: string | Types.ObjectId): Promise<void> {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
    const graphCacheKey = `graph:getGraphById:{"id":"${graphId.toString()}"}`;
    await this.redisService.del(graphCacheKey);
    console.log(`üóëÔ∏è Redis GRAPH CACHE INVALIDATED: ${graphCacheKey}`);
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∫—ç—à–∏ —Å–ø–∏—Å–∫–æ–≤ –≥—Ä–∞—Ñ–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await this.redisService.delPattern('graph:getParentGraphs:*');
    await this.redisService.delPattern('graph:getGlobalGraphs:*');
    console.log(`üóëÔ∏è Redis GRAPH LISTS CACHE INVALIDATED: All graph lists`);
  }

  // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ ---
  async toggleSub(user: string | Types.ObjectId, graph: string | Types.ObjectId): Promise<{ subscribed: boolean }> {
    const session = await this.graphSubsModel.db.startSession();
    
    try {
      return await session.withTransaction(async () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º findOneAndDelete –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        const deletedSub = await this.graphSubsModel
          .findOneAndDelete({ user, graph })
          .session(session)
          .lean()
          .exec();

        if (deletedSub) {
          // –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ - —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
          await Promise.all([
            this.GraphModel.findByIdAndUpdate(
              graph,
              { $inc: { subsNum: -1 } },
              { session, lean: true }
            ).exec(),
            this.UserModel.findByIdAndUpdate(
              user,
              { $inc: { graphSubsNum: -1 } },
              { session, lean: true }
            ).exec()
          ]);
          
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä–∞—Ñ–∞
          await Promise.all([
            this.invalidateUserSubscriptionsCache(user),
            this.invalidateGraphCache(graph)
          ]);
          
          return { subscribed: false };
        } else {
          // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—ã–ª–æ - —Å–æ–∑–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
          await Promise.all([
            this.graphSubsModel.create([{ user, graph }], { session }),
            this.GraphModel.findByIdAndUpdate(
              graph,
              { $inc: { subsNum: 1 } },
              { session, lean: true }
            ).exec(),
            this.UserModel.findByIdAndUpdate(
              user,
              { $inc: { graphSubsNum: 1 } },
              { session, lean: true }
            ).exec()
          ]);
          
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä–∞—Ñ–∞
          await Promise.all([
            this.invalidateUserSubscriptionsCache(user),
            this.invalidateGraphCache(graph)
          ]);
          
          return { subscribed: true };
        }
      });
    } catch (error) {
      console.error('Error in toggleSub:', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    } finally {
      await session.endSession();
    }
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ ---
  // --- –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏ ---
  async getSubsSchedule(userId: Types.ObjectId) {
    try {
      // –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π aggregate)
      const subscribedGraphs = await this.graphSubsModel
        .find({ user: userId })
        .select('graph')
        .lean()
        .exec();
      
      const subscribedGraphIds = [...new Set(subscribedGraphs.map(sub => sub.graph))];

      // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–±—ã—Ç–∏—è
      const [schedule, userEvents] = await Promise.all([
        subscribedGraphIds.length > 0 
          ? this.scheduleService.getWeekdaySchedulesByGraphs(
              subscribedGraphIds.map(id => id.toString())
            )
          : Promise.resolve([]),
        this.eventRegsService.getEventsByUserId(userId)
      ]);

      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
      const mergedEvents = userEvents.map((reg: any) => ({
        ...reg.eventId,
        isAttended: true
      }));

      return {
        schedule,
        events: mergedEvents
      };
    } catch (error) {
      console.error('Error in getSubsSchedule:', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫');
    }
  }

  // --- –ü–æ–¥–ø–∏—Å–∫–∏ ---
  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ ---
  async getSubsEvents(userId: Types.ObjectId) {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [subscribedGraphs, userEventRegs] = await Promise.all([
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.graphSubsModel.aggregate([
        { $match: { user: userId } },
        { $group: { _id: '$graph' } },
        { $project: { _id: 1 } }
      ]).exec(),
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      this.eventRegsModel
        .find({ userId })
        .select('eventId')
        .lean()
        .exec()
    ]);

    const graphIds = subscribedGraphs?.length > 0 
      ? subscribedGraphs.map(graph => graph._id.toString()) 
      : [];

    if (graphIds.length === 0) {
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤
    const events = await this.eventService.getEventsByGraphsIds(graphIds);

    // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    const attendedEventIds = new Set(
      userEventRegs.map(reg => reg.eventId.toString())
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ isAttended –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é
    const eventsWithAttendance = events.map(event => ({
      ...event,
      isAttended: attendedEventIds.has(event._id.toString())
    }));

    return eventsWithAttendance;
  }


  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
  async getUserSubscribedGraphs(userId: Types.ObjectId) {
    try {
      const subscribedGraphs = await this.graphSubsModel
        .find({ user: userId })
        .populate({
          path: 'graph',
          select: 'name about imgPath ownerUserId'
        })
        .lean()
        .exec();

      return subscribedGraphs.map(sub => ({
        ...sub.graph,
        isSubscribed: true
      }));
    } catch (error) {
      console.error('Error in getUserSubscribedGraphs:', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø');
    }
  }

  // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≥—Ä–∞—Ñ–∞ –ø–æ –µ–≥–æ ID ---
  async getGraphSubscribers(graphId: Types.ObjectId) {
    try {
      const subscribers = await this.graphSubsModel
        .find({ graph: graphId })
        .populate({
          path: 'user',
          select: 'firstName lastName username avaPath telegramId'
        })
        .sort({ createdAt: -1 }) // –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å–Ω–∞—á–∞–ª–∞
        .lean()
        .exec();

      return subscribers.map(sub => ({
        ...sub.user,
        subscribedAt: sub.createdAt
      }));
    } catch (error) {
      console.error('Error in getGraphSubscribers:', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≥—Ä–∞—Ñ–∞');
    }
  }

  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ ---
  // --- –ù—É–∂–Ω–∞ –¥–ª—è –≥–ª–∞–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  async isUserSubsExists(graph: string, userId: string): Promise<boolean> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º select —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π –∏ lean() –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const exists = await this.graphSubsModel
        .findOne(
          {
            graph: new Types.ObjectId(graph),
            user: new Types.ObjectId(userId),
          },
          { _id: 1 } // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        )
        .lean() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Mongoose
        .exec();

      return !!exists;
    } catch (error) {
      console.error('Error in isUserSubsExists:', error);
      return false;
    }
  }

  // --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ---
  // --- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MongoDB bulk operations –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
  async toggleSubBulk(user: string | Types.ObjectId, graph: string | Types.ObjectId): Promise<{ subscribed: boolean }> {
    const session = await this.graphSubsModel.db.startSession();
    
    try {
      return await session.withTransaction(async () => {
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        const deleteResult = await this.graphSubsModel
          .deleteOne({ user, graph })
          .session(session)
          .exec();

        if (deleteResult.deletedCount > 0) {
          // –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º bulk operations –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
          const bulkOps = [
            {
              updateOne: {
                filter: { _id: graph },
                update: { $inc: { subsNum: -1 } }
              }
            }
          ];

          const userBulkOps = [
            {
              updateOne: {
                filter: { _id: user },
                update: { $inc: { graphSubsNum: -1 } }
              }
            }
          ];

          await Promise.all([
            this.GraphModel.bulkWrite(bulkOps, { session }),
            this.UserModel.bulkWrite(userBulkOps, { session })
          ]);

          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä–∞—Ñ–∞
          await Promise.all([
            this.invalidateUserSubscriptionsCache(user),
            this.invalidateGraphCache(graph)
          ]);

          return { subscribed: false };
        } else {
          // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—ã–ª–æ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
          const bulkOps = [
            {
              updateOne: {
                filter: { _id: graph },
                update: { $inc: { subsNum: 1 } }
              }
            }
          ];

          const userBulkOps = [
            {
              updateOne: {
                filter: { _id: user },
                update: { $inc: { graphSubsNum: 1 } }
              }
            }
          ];

          await Promise.all([
            this.graphSubsModel.create([{ user, graph }], { session }),
            this.GraphModel.bulkWrite(bulkOps, { session }),
            this.UserModel.bulkWrite(userBulkOps, { session })
          ]);

          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä–∞—Ñ–∞
          await Promise.all([
            this.invalidateUserSubscriptionsCache(user),
            this.invalidateGraphCache(graph)
          ]);

          return { subscribed: true };
        }
      });
    } catch (error) {
      console.error('Error in toggleSubBulk:', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
    } finally {
      await session.endSession();
    }
  }

}
